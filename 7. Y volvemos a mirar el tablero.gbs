/*
7. Y volvemos a mirar el tablero
Escribir la función hayAlgunaCeldaVacía, que indica si alguna de las celdas del tablero está vacía.
*/

program {
    return(hayAlgunaCeldaVacía())
}

function hayAlgunaCeldaVacía() {
    /*
    Propósito:          -Indíca si hay alguna celda vacía en el tablero.
    Precondición:       -Ninguna.
    Tipo:               -Booleano.
    */
    IrAPrimeraCeldaEnUnRecorridoAl_Y_(Este, Norte)
    while(not esCeldaVacía()) {
        IrASiguienteCeldaEnUnRecorridoAl_Y_(Este, Norte)
    }
    return(esCeldaVacía())
}

function esCeldaVacía() {
  /*
    PROPÓSITO:      -Indíca si la celda actual está vacía.  
    PRECONDICIONES: -Ninguna.
    TIPO:           -Booleano. Retorna verdadero si la celda actual está vacía, en caso contrario retorna falso.
      * 
  */
  return (not hayBolitas(Rojo) && not hayBolitas(Negro) && not hayBolitas(Azul) && not hayBolitas(Verde))
}

procedure IrAPrimeraCeldaEnUnRecorridoAl_Y_(dirPrincipal, dirSecundaria) {
  /*
    PROPÓSITO:          -Posiciona el cabezal en el inicio del recorrido en dirección **dirPrincipal** y **dirSecundaria**. 
    PARÁMETROS:
      * dirPrincipal:   -Dirección. Indíca la primer dirección que debe tomar el cabezal para ubicarse en la primera celda del recorrido.
      * dirSecundaria:  -Dirección. Indíca la segunda dirección que debe tomar el cabezal para ubicarse en la primera celda del recorrido.
    PRECONDICIONES:     -La direcciónes **dirPrincipal** y **dirSecundaria** no pueden ser iguales ni opuestas..
      * 
  */
  IrAlBorde(opuesto(dirPrincipal))
  IrAlBorde(opuesto(dirSecundaria))
}

function haySiguienteCeldaEnUnRecorridoAl_Y_(dirPrincipal, dirSecundaria) {
  /*
    PROPÓSITO:            -Indíca si existe la siguiente celda en un recorrido hacia la **dirPrincipal** y la **dirSecundaria**.
    PARÁMETROS:     
      * dirPrincipal:     -Dirección. Indíca la primera dirección del recorrido. 
      * dirSecundaria:    -Dirección. Indíca la segunda dirección del recorrido.
    PRECONDICIONES:       -Ninguna.
      * 
    Tipo:                 -Booleano.Retorna verdadeor en el caso de que exista una siguiente celda en el recorrido, en caso contrario retorna falso.
  */
  return(puedeMover(dirPrincipal) || puedeMover(dirSecundaria))
}

procedure  IrASiguienteCeldaEnUnRecorridoAl_Y_(dirPrincipal, dirSecundaria) {
  /*
    PROPÓSITO:        -Posiciona el cabezal en la siguiente celda del recorrido con **dirPrincipal** y **dirPrincipal**
    PRECONDICIONES:   -La **dirPrincipal** no puede ser igual u opuesta a la **dirSecundaria**.
    PARÁMETROS:
      * dirPrincipal: -Dirección.-Indíca la primera dirección del recorrido.
      * dirSecundaria:-Dirección.-Indíca la segunda dirección del recorrido.
  */
  //Va al opuesto de la direccion principal.
  if(puedeMover(dirPrincipal)) {
    Mover(dirPrincipal)
  }else {
    IrAlBorde(opuesto(dirPrincipal))
    Mover(dirSecundaria)
  }
}